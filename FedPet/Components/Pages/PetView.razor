@page "/PetView/{Id:int}"
@using FedPet.Data
@inject DbService Db
@inject NavigationManager Navigation

<div class="container-fluid d-flex flex-column justify-content-center vw-100 vh-100">
    
    <div class="row" style="min-height: 5vh;"></div>

    @* DISPLAY NAME AND NAME EDITING CONTROLS CONDITIONALLY *@
    <div class="row justify-content-center align-content-center text-center" style="min-height: 10vh;">
        @if (!_editName)
        {
            <h1 class="d-inline-block text-center fw-bold text-name-break" style="width: 80vw;">
                @if (_self is not null) @_self.Name
            </h1>
        }
        else
        {
            <div class="col-7 justify-content-start align-content-center">
                <input type="text" class="form-control text-start py-2 px-4 fw-semibold fs-2 text-secondary"
                       @bind-value="_editNameValue"/></div>

            <div class="col-2 justify-content-center align-content-center">
                <div class="button-accept shadow-sm mx-auto justify-content-center align-content-center"
                     @onclick="ChangePetName">
                    <img src="icons/accept.svg" class="icon d-block" alt="accept"/></div></div>
        }
    </div>

    <div class="row justify-content-center align-content-center mt-5">
        @* ICON BACK ARROW *@
        <div class="col-3 justify-content-center align-content-center">
            <div class="button-neutral shadow-sm mx-auto justify-content-center align-content-center"
                 @onclick='() => Navigation.NavigateTo("/")'>
                <img src="icons/arrow.svg" class="icon d-block" alt="back"/></div></div>
        @* ICON EDIT PET *@
        <div class="col-3 justify-content-center align-content-center">
            <div class="button-neutral shadow-sm mx-auto justify-content-center align-content-center"
                 @onclick="() => _editPet = !_editPet">
                <img src="icons/more_white.svg" class="icon d-block" alt="edit"/></div></div>
        @* ICON NOTIFICATIONS *@
        <div class="col-3 justify-content-center align-content-center">
            @if (_self is { NotificationEnabled: true })
            {
                <a href="@($"/EditNotification/{_self?.Id}")">
                    <div class="button-accept shadow-sm mx-auto justify-content-center align-content-center">
                        <img src="icons/bell.svg" class="icon d-block" alt="notifications"/></div></a>
            }
            else
            {
                <a href="@($"/EditNotification/{_self?.Id}")">
                    <div class="button-neutral shadow-sm mx-auto justify-content-center align-content-center">
                        <img src="icons/bell.svg" class="icon d-block" alt="notifications"/></div></a>
            }
        </div>
    </div>

    @* DISPLAY PET EDITING COMPONENT PANEL CONDITIONALLY *@
    @if (_editPet)
    {
        <div class="row justify-content-center align-content-center mt-3">
            <EditPet EditingName="_editName" EditingNameChanged="OnEditingNameChanged" DeletePet="DeletePet" DeleteRecords="DeleteFeedingRecords"/>
        </div>
    }
    
    @* DISPLAY TIME SINCE LAST FEEDING CONDITIONALLY *@
    @if (_feedingRecords.Count > 0)
    {
        <div class="row justify-content-center align-content-center mx-auto mt-4" style="width: 80vw;">
            <h5 class="d-inline-block fw-semibold text-center">@GetTimeSpanString(DateTime.Now - _feedingRecords.Last().FeedingTime)<br/>since last feeding.</h5></div>
    }
    
    @* FEEDING RECORDS LIST *@
    @if (_feedingRecords.Count > 0)
    {
        <div class="row view-list flex-grow-1 flex-shrink-1 justify-content-center align-content-start mx-auto mt-4">
            @for (int i = _feedingRecords.Count - 1; i >= 0; i--)
            {
                <h6 class="d-inline-block text-center fw-normal mb-3 align-self-start">@GetFeedingRecordString(_feedingRecords[i].FeedingTime)</h6>
            }
        </div>
    }
    else
    {
        <div class="row view-list flex-grow-1 flex-shrink-1 justify-content-center align-content-center mx-auto">
            <h2 class="d-inline-block text-center fw-bold text-secondary-emphasis align-self-center">Click the bell icon<br/>
                to set-up notifications.<br/>
                Then record your first feeding.</h2>
        </div>    
    }

    @* DISPLAY TIME UNTIL NEXT FEEDING CONDITIONALLY *@
    @if (_self?.NextFeeding is not null)
    {
        if (DateTime.Now < _self.NextFeeding)
        {
            <div class="row justify-content-center align-content-center mx-auto my-3" style="width: 80vw; color: var(--fedpet-green)">
                <h5 class="d-inline-block fw-semibold text-center">@GetTimeSpanString(_self.NextFeeding - DateTime.Now)<br/>until next feeding.</h5></div>
        }
        else
        {
            <div class="row justify-content-center align-content-center mx-auto my-3" style="width: 80vw; color: var(--fedpet-red)">
                <h5 class="d-inline-block fw-semibold text-center">@GetTimeSpanString(DateTime.Now - _self.NextFeeding)<br/>overdue.</h5></div>
        }
    }

    @* RECORD FEEDING BUTTON *@
    <div class="row justify-content-center align-content-center">
        <div class="button-add shadow mx-auto mb-5 justify-content-center align-content-center"
             @onclick="RecordFeeding">
            <img src="icons/pencil.svg" class="icon d-block" alt="record feeding"/>
        </div>
    </div>

</div>

@code {
    [Parameter] public int Id { get; set; }

    private Pet? _self;
    private List<FeedingRecord> _feedingRecords = new();
    
    private bool _editName;
    private string _editNameValue = String.Empty;
    private bool _editPet;

    // VIEW PAGE INITIALIZATION
    protected override async Task OnInitializedAsync()
    {
        _self = await Db.GetPetAsync(Id);
        if (_self is null) Navigation.NavigateTo("/");

        if (_self != null) _feedingRecords = await Db.GetFeedingRecordsAsync(_self.Id);
    }

    private async Task OnEditingNameChanged(bool newValue)
    {
        _editNameValue = String.Empty;
        _editName = newValue;
        await Task.CompletedTask;
    }

    private string GetFeedingRecordString(DateTime dateTime)
    {
        string day = dateTime.DayOfWeek.ToString().Remove(3);
        string datetime = dateTime.ToString("M/d/yy h:mm tt");
        
        return $"{day}. {datetime}";
    }

    private string GetTimeSpanString(TimeSpan? timeSpan)
    {
        string? days = timeSpan?.Days.ToString();
        string? hours = timeSpan?.Hours.ToString();
        string? minutes = timeSpan?.Minutes.ToString();
        
        return $"{days} days, {hours} hours, {minutes} minutes";
    }

    // RECORD HANDLING METHODS
    private async Task RecordFeeding()
    {
        if (_self != null)
        {
            if (await RecordFeedingEarlyCheck())
            {
                await Db.PostFeedingRecordAsync(new FeedingRecord { PetId = _self.Id, FeedingTime = DateTime.Now });
                if (_self.NotificationEnabled)
                {
                    await NotificationHandler.CreateNotification(Db, _self, DateTime.Now);
                    _self = await Db.GetPetAsync(_self.Id);
                }
                await UpdateFeedingRecords();
            }
        }
        else Navigation.NavigateTo("/");
    }

    private async Task<bool> RecordFeedingEarlyCheck()
    {
        if (_self?.NextFeeding is not null && _self.NextFeeding > DateTime.Now)
        {
            bool result = await Application.Current?.MainPage?.DisplayAlert("EARLY FEEDING", "Are you sure you want to record a new feeding before the set time is due?", "YES", "NO");
            if (result)
                return true; 
            return false;
        }
        return true;
    }

    private async Task UpdateFeedingRecords()
    {
        if (_self != null)
        {
            _feedingRecords = await Db.GetFeedingRecordsAsync(_self.Id);
            StateHasChanged();
        }
        else Navigation.NavigateTo("/");
    }

    private async Task DeleteFeedingRecords()
    {
        bool result = await Application.Current?.MainPage?.DisplayAlert("CLEAR RECORDS", $"Are you sure you want to clear {_self?.Name}s feeding records?", "YES", "NO");

        if (result)
        {
            if (_self is not null)
            {
                await NotificationHandler.CancelNotification(Db, _self);
                _self = await Db.GetPetAsync(_self.Id);
            }
            else
                Navigation.NavigateTo("/");
            
            foreach (FeedingRecord record in _feedingRecords) await Db.DeleteFeedingRecordAsync(record);
            await UpdateFeedingRecords();
        }
    }

    // PET HANDLING METHODS
    private async Task ChangePetName()
    {
        if (!String.IsNullOrWhiteSpace(_editNameValue))
        {
            if (_self != null) 
                _self.Name = _editNameValue.Trim();
            else Navigation.NavigateTo("/");
            
            await UpdatePet();
            _editName = false;
        }
    }

    private async Task UpdatePet()
    {
        if (_self is not null)
        {
            await Db.UpdatePetAsync(_self);
            _self = await Db.GetPetAsync(_self.Id);
            StateHasChanged();
        }
        else Navigation.NavigateTo("/");
    }

    private async Task DeletePet()
    {
        bool result = await Application.Current?.MainPage?.DisplayAlert("DELETE", "Are you sure?", "YES","NO");
        if (result)
        {
            if (_self != null) await Db.DeletePetAsync(_self);
            Navigation.NavigateTo("/");
        }
    }
}